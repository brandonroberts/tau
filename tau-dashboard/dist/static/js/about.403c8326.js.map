{"version":3,"sources":["webpack:///./src/components/views/Config.vue","webpack:///./node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","webpack:///./src/components/views/Config.vue?e554","webpack:///./src/components/views/Config.vue?e1d0"],"names":["class","header","value","settings","stripedRows","field","headerStyle","body","data","active","updateSettings","eventSubs","updateEventSubs","scopes","required","scopeEndpoints","id","endpoint","href","reference_url","target","description","updateTokenScopes","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","name","setup","store","setting","getters","console","log","endpoints","endpointsByScope","scope","filter","eventSubscriptions","payload","map","es","dispatch","window","location","scopeData","tau","put","get","irc_res","use_irc","render"],"mappings":"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","file":"static/js/about.403c8326.js","sourcesContent":["<template>\n  <h1>TAU Settings</h1>\n  <Panel class=\"dark-header\" header=\"General TAU settings\">\n    <DataTable :value=\"settings\" stripedRows>\n      <Column field=\"active\" header=\"\" headerStyle=\"width: 6rem;\">\n        <template #body=\"{ data }\">\n          <InputSwitch v-model=\"data.active\" />\n        </template>\n      </Column>\n      <Column\n        field=\"setting\"\n        header=\"Setting\"\n        headerStyle=\"width: 12rem;\"\n      ></Column>\n      <Column field=\"description\" header=\"Description\"></Column>\n    </DataTable>\n    <Button @click=\"updateSettings()\">Update Settings</Button>\n  </Panel>\n  <Panel class=\"dark-header\" header=\"Twitch EventSub Subscriptions\">\n    <p>\n      Check the subscriptions you would like to use, then click \"Update Token\"\n      at the bottom of the list.\n    </p>\n    <DataTable :value=\"eventSubs\" stripedRows>\n      <Column field=\"active\" header=\"\" headerStyle=\"width: 6rem;\">\n        <template #body=\"{ data }\">\n          <InputSwitch v-model=\"data.active\" />\n        </template>\n      </Column>\n      <Column\n        field=\"subscription_type\"\n        header=\"Setting\"\n        headerStyle=\"width: 20rem;\"\n      ></Column>\n      <Column field=\"description\" header=\"Description\"></Column>\n    </DataTable>\n    <Button @click=\"updateEventSubs()\">Update Subscriptions</Button>\n  </Panel>\n  <Panel class=\"dark-header\" header=\"Twitch Helix API Token Scopes\">\n    <p>\n      Check the scopes you would like to use, then click \"Update Token\" at the\n      bottom of the list.\n    </p>\n    <DataTable :value=\"scopes\" stripedRows>\n      <Column field=\"active\" header=\"\" headerStyle=\"width: 6rem;\">\n        <template #body=\"{ data }\">\n          <InputSwitch v-model=\"data.required\" />\n        </template>\n      </Column>\n      <Column field=\"scope\" header=\"Scope\" headerStyle=\"width: 20rem;\"></Column>\n      <Column field=\"scope\" header=\"Endpoints\">\n        <template #body=\"{ data }\">\n          <template\n            v-for=\"endpoint of scopeEndpoints[data.id]\"\n            :key=\"endpoint.id\"\n          >\n            <a :href=\"endpoint.reference_url\" target=\"_blank\">{{\n              endpoint.description\n            }}</a\n            ><br />\n          </template>\n        </template>\n      </Column>\n    </DataTable>\n    <Button @click=\"updateTokenScopes()\">Update Token Scopes</Button>\n  </Panel>\n</template>\n\n<script lang=\"ts\">\nimport { EventSubscription } from '@/models/event-subscription';\nimport { TwitchHelixEndpoint } from '@/models/twitch-helix-endpoint';\nimport { TwitchOAuthScope } from '@/models/twitch-oauth-scope';\nimport baseUrl from '@/services/base-api-url';\nimport api$ from '@/services/tau-apis';\n\nimport { computed, defineComponent, onMounted, ref } from 'vue';\nimport { useStore } from 'vuex';\n\nexport default defineComponent({\n  name: 'Config',\n  setup() {\n    const store = useStore();\n\n    const settings = ref([\n      {\n        active: true,\n        setting: 'Use IRC',\n        description:\n          'Use IRC for grabbing emote data for Channel Point Redemptions',\n      },\n    ]);\n\n    const eventSubs = computed(function () {\n      return store.getters['eventSubscriptions/all'];\n    });\n\n    const scopes = computed(function () {\n      console.log(store.getters['twitchOAuthScopes/all']);\n      return store.getters['twitchOAuthScopes/all'];\n    });\n\n    const scopeEndpoints = computed(function () {\n      const endpoints = store.getters[\n        'twitchHelixEndpoints/all'\n      ] as TwitchHelixEndpoint[];\n      const scopes = store.getters[\n        'twitchOAuthScopes/all'\n      ] as TwitchOAuthScope[];\n      const endpointsByScope: { [key: string]: TwitchHelixEndpoint[] } = {};\n\n      for (let scope of scopes) {\n        endpointsByScope[scope.id] = endpoints.filter(\n          (endpoint) => endpoint.scope === scope.id,\n        );\n      }\n      return endpointsByScope;\n    });\n\n    async function updateEventSubs() {\n      const eventSubscriptions: EventSubscription[] =\n        store.getters['eventSubscriptions/all'];\n      const payload = eventSubscriptions.map((es) => {\n        return {\n          id: es.id,\n          active: es.active,\n        };\n      });\n      await store.dispatch('eventSubscriptions/bulkActivate', payload);\n      window.location.href = `${baseUrl}/refresh-token-scope/`;\n    }\n\n    async function updateTokenScopes() {\n      const scopeData = scopes.value as TwitchOAuthScope[];\n      const payload = scopeData.map((scope) => ({ ...scope }));\n      await store.dispatch('twitchOAuthScopes/bulkUpdate', payload);\n      window.location.href = `${baseUrl}/refresh-token-scope/`;\n    }\n\n    async function updateSettings() {\n      console.log('update settings called!');\n      for (const setting of settings.value) {\n        if (setting.setting === 'Use IRC') {\n          const payload = {\n            value: setting.active,\n          };\n          const res = await api$.tau.put('settings/use_irc', payload);\n        }\n      }\n    }\n\n    onMounted(async () => {\n      await store.dispatch('twitchOAuthScopes/loadAll');\n      await store.dispatch('twitchHelixEndpoints/loadAll');\n      const irc_res = await api$.tau.get('settings/use_irc');\n      settings.value[0].active = irc_res.use_irc;\n    });\n\n    return {\n      settings,\n      eventSubs,\n      scopes,\n      scopeEndpoints,\n      updateEventSubs,\n      updateTokenScopes,\n      updateSettings,\n    };\n  },\n});\n</script>\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","\nimport { EventSubscription } from '@/models/event-subscription';\nimport { TwitchHelixEndpoint } from '@/models/twitch-helix-endpoint';\nimport { TwitchOAuthScope } from '@/models/twitch-oauth-scope';\nimport baseUrl from '@/services/base-api-url';\nimport api$ from '@/services/tau-apis';\n\nimport { computed, defineComponent, onMounted, ref } from 'vue';\nimport { useStore } from 'vuex';\n\nexport default defineComponent({\n  name: 'Config',\n  setup() {\n    const store = useStore();\n\n    const settings = ref([\n      {\n        active: true,\n        setting: 'Use IRC',\n        description:\n          'Use IRC for grabbing emote data for Channel Point Redemptions',\n      },\n    ]);\n\n    const eventSubs = computed(function () {\n      return store.getters['eventSubscriptions/all'];\n    });\n\n    const scopes = computed(function () {\n      console.log(store.getters['twitchOAuthScopes/all']);\n      return store.getters['twitchOAuthScopes/all'];\n    });\n\n    const scopeEndpoints = computed(function () {\n      const endpoints = store.getters[\n        'twitchHelixEndpoints/all'\n      ] as TwitchHelixEndpoint[];\n      const scopes = store.getters[\n        'twitchOAuthScopes/all'\n      ] as TwitchOAuthScope[];\n      const endpointsByScope: { [key: string]: TwitchHelixEndpoint[] } = {};\n\n      for (let scope of scopes) {\n        endpointsByScope[scope.id] = endpoints.filter(\n          (endpoint) => endpoint.scope === scope.id,\n        );\n      }\n      return endpointsByScope;\n    });\n\n    async function updateEventSubs() {\n      const eventSubscriptions: EventSubscription[] =\n        store.getters['eventSubscriptions/all'];\n      const payload = eventSubscriptions.map((es) => {\n        return {\n          id: es.id,\n          active: es.active,\n        };\n      });\n      await store.dispatch('eventSubscriptions/bulkActivate', payload);\n      window.location.href = `${baseUrl}/refresh-token-scope/`;\n    }\n\n    async function updateTokenScopes() {\n      const scopeData = scopes.value as TwitchOAuthScope[];\n      const payload = scopeData.map((scope) => ({ ...scope }));\n      await store.dispatch('twitchOAuthScopes/bulkUpdate', payload);\n      window.location.href = `${baseUrl}/refresh-token-scope/`;\n    }\n\n    async function updateSettings() {\n      console.log('update settings called!');\n      for (const setting of settings.value) {\n        if (setting.setting === 'Use IRC') {\n          const payload = {\n            value: setting.active,\n          };\n          const res = await api$.tau.put('settings/use_irc', payload);\n        }\n      }\n    }\n\n    onMounted(async () => {\n      await store.dispatch('twitchOAuthScopes/loadAll');\n      await store.dispatch('twitchHelixEndpoints/loadAll');\n      const irc_res = await api$.tau.get('settings/use_irc');\n      settings.value[0].active = irc_res.use_irc;\n    });\n\n    return {\n      settings,\n      eventSubs,\n      scopes,\n      scopeEndpoints,\n      updateEventSubs,\n      updateTokenScopes,\n      updateSettings,\n    };\n  },\n});\n","import { render } from \"./Config.vue?vue&type=template&id=2ce9d1b0\"\nimport script from \"./Config.vue?vue&type=script&lang=ts\"\nexport * from \"./Config.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}